import { GhostError, GhostErrorOptions } from './GhostError';
export declare class InternalServerError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class IncorrectUsageError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class NotFoundError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class BadRequestError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class UnauthorizedError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class NoPermissionError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class ValidationError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class UnsupportedMediaTypeError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class TooManyRequestsError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class MaintenanceError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class MethodNotAllowedError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class RequestNotAcceptableError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class RangeNotSatisfiableError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class RequestEntityTooLargeError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class TokenRevocationError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class VersionMismatchError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class DataExportError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class DataImportError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class EmailError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class ThemeValidationError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class DisabledFeatureError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class UpdateCollisionError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class HostLimitError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class HelperWarning extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class PasswordResetRequiredError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class UnhandledJobError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class NoContentError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class ConflictError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
export declare class MigrationError extends GhostError {
    constructor(options?: GhostErrorOptions);
}
//# sourceMappingURL=errors.d.ts.map